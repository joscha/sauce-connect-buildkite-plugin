#!/bin/bash
set -euo pipefail

PLUGIN_NAME=sauce-connect-buildkite-plugin

# Allow to pass TMP_DIR for testing purposes
if [[ -z "${TMP_DIR:-}" ]]; then
  TMP_DIR="${TMPDIR:-/tmp}/${PLUGIN_NAME}"
  export BUILDKITE_PLUGIN_SAUCE_CONNECT_TMP_DIR="${TMP_DIR}"
fi

# See https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy
DEFAULT_SAUCE_CONNECT_VERSION="4.5.3"

error() {
  local message="$1"
  echo "^^^ +++"
  echo "+++ :saucelabs: [sauce-connect] Error: ${message}" >&2
  exit 1
}

check_set() {
  local name="$1"
  if [[ -z "${!name:-}" ]]; then
    error "${name} not set"
  fi
}

maybe_download_sc_archive() {
  local sc_archive="$1"
  local sc_archive_path="${TMP_DIR}/${sc_archive}"
  if [[ ! -e "${sc_archive_path}" ]]; then
    local tmp_archive_path
    tmp_archive_path="$(mktemp -p ${TMP_DIR})"

    # Download to a temporary file & then move it to the desired location once we're sure it has succeeded.
    # Otherwise, if the download is interrupted we are left with a corrupted file which we will assume is fully
    # downloaded on subsequent invocations of `maybe_download_sc_archive`.
    curl -fsSL --create-dirs --retry 5 -o "${tmp_archive_path}" "https://saucelabs.com/downloads/${sc_archive}"

    mv "${tmp_archive_path}" "${sc_archive_path}"
  fi

  echo "${sc_archive_path}"
}

maybe_download_sc() {
  local sauce_connect_version="$1"

  pushd "${TMP_DIR}" >/dev/null
  if [[ -e "./sc" ]]; then
    return
  fi
  local os
  case "${OSTYPE}" in
    linux*)
      os="linux"

      local sc_tarball="sc-${sauce_connect_version}-${os}.tar.gz"
      local sc_tarball_path
      sc_tarball_path=$(maybe_download_sc_archive "${sc_tarball}")

      tar xzf "${sc_tarball_path}" "sc-${sauce_connect_version}-${os}/bin/sc"
      mv "./sc-${sauce_connect_version}-${os}/bin/sc" ./sc
      rm -rf "./sc-${sauce_connect_version}-${os}/bin"
    ;;
    darwin*)
      os="osx"

      local sc_zip="sc-${sauce_connect_version}-${os}.zip"
      local sc_zip_path
      sc_zip_path=$(maybe_download_sc_archive "${sc_zip}")

      unzip -p "${sc_zip_path}" "sc-${sauce_connect_version}-${os}/bin/sc" > ./sc
      rm sc.zip
      chmod +x ./sc
    ;;
    *) error "unknown OS: ${OSTYPE}" ;;
  esac

  popd >/dev/null
}

main() {
  check_set SAUCE_USERNAME
  check_set SAUCE_ACCESS_KEY
  [[ -z "${BUILDKITE_PLUGIN_SAUCE_CONNECT_TUNNEL_IDENTIFIER:-}" ]] && check_set BUILDKITE_JOB_ID

  local tunnel_identifier="${BUILDKITE_PLUGIN_SAUCE_CONNECT_TUNNEL_IDENTIFIER:-${BUILDKITE_JOB_ID}}"
  local sauce_connect_version="${BUILDKITE_PLUGIN_SAUCE_CONNECT_SAUCE_CONNECT_VERSION:-${DEFAULT_SAUCE_CONNECT_VERSION}}"

  maybe_download_sc "${sauce_connect_version}"

  # shellcheck disable=SC2153
  sc3 \
    "${tunnel_identifier}" \
    "${SAUCE_USERNAME}" \
    "${SAUCE_ACCESS_KEY}"
}

sc3() {
  if ! (sc1 1 "$@" || sc1 2 "$@" || sc1 3 "$@") ; then
    # if force-upload-logs is set, we already upload them in the pre-exit case,
    # so no need to upload them here
    if ! [[ "${BUILDKITE_PLUGIN_SAUCE_CONNECT_FORCE_UPLOAD_LOGS:-false}" =~ ^(true|on|1)$ ]]; then
      upload_sauce_connect_logs
    fi
    error "Failed to connect!"
  fi
}

sc1() {
  local attempt="$1"
  local tunnel_identifier="$2"
  local sauce_username="$3"
  local sauce_access_key="$4"

  echo "--- :saucelabs: [sauce-connect] Starting (Attempt ${attempt})"
  local readyfile="${TMP_DIR}/ready.${attempt}"
  local pidfile="${TMP_DIR}/pid.${attempt}"

  pushd "${TMP_DIR}" >/dev/null

  # TODO: find a better way to stub ./sc
  if [[ -z "${IS_UNDER_TEST:-}" ]]; then
    export PATH="${TMP_DIR}:${PATH}"
  fi
  sc \
    -u "${sauce_username}" \
    -k "${sauce_access_key}" \
    --tunnel-identifier "${tunnel_identifier}" \
    --readyfile "${readyfile}" \
    --pidfile "${pidfile}" \
    --logfile "${TMP_DIR}/sauce-connect.${attempt}.log" \
    --verbose \
    &

  local pid="$!"

  popd >/dev/null

  if ! wait_for_readyfile "${readyfile}" "${pid}"; then
    echo
    >&2 echo "Warning: sauce-connect timed out!"
    return 1
  else
    echo
    echo 'Success: sauce-connect is up \o/'
  fi
}

is_pid_alive() {
  local pid="$1"
  kill -0 "${pid}" >/dev/null 2>&1
}

wait_for_readyfile() {
  local readyfile="$1"
  local pid="$2"
  local i=0
  local sleep_time_seconds=2
  local max_wait_seconds=120
  while [[ "${i}" -lt "$((max_wait_seconds/sleep_time_seconds))" ]] \
     && [[ ! -e "${readyfile}" ]] \
     && is_pid_alive "${pid}" ; do
    i=$((i+1))
    sleep "${sleep_time_seconds}"
  done
  [[ -e "${readyfile}" ]]
}

upload_sauce_connect_logs() {
  pushd "${TMP_DIR}" >/dev/null
  echo "--- :saucelabs: [sauce-connect] Uploading logs"
  buildkite-agent artifact upload "sauce-connect.*.log"
  popd >/dev/null
}

main "$@"
